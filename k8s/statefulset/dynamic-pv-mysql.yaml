---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
stringData:
  NEXT_USER: "next"
  NEXT_PASSWORD: "P@ssw0rd"
  REPLICA_PASSWORD: "P@ssw0rd"
  MYSQL_ROOT_PASSWORD: "P@ssw0rd"
  MYSQL_DATABASE: "starrail"
  TZ: "Asia/Bangkok"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-script
data:
  set-replica.sh: |
    #!/bin/bash

    if [[ -z "$REPLICA_PASSWORD" ]]; then
      echo "REPLICA_PASSWORD is not set"
      exit 1
    fi

    if [[ "$HOSTNAME" == "mysql-0" ]]; then
      echo "Configuring primary..."
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
        # disable binlog for primary to avoid create user statements being logged and replicated
        SET SESSION sql_log_bin=0;
        
        CREATE USER IF NOT EXISTS 'repl'@'%' IDENTIFIED WITH mysql_native_password BY '$REPLICA_PASSWORD';
        GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
        
        CREATE USER IF NOT EXISTS '$NEXT_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$NEXT_PASSWORD';
        GRANT SELECT, INSERT, UPDATE, DELETE ON starrail.* TO '$NEXT_USER'@'%';
        
        FLUSH PRIVILEGES;

        # re-enable binlog for primary
        SET SESSION sql_log_bin=1;"
    else
      echo "Configuring replica..."

      timeout=60
      count=0
      until mysqladmin ping -h mysql-0.mysql.mysql.svc.cluster.local --silent || [ $count -ge $timeout ]; do
        sleep 2
        count=$((count + 2))
      done

      if [ $count -ge $timeout ]; then
        echo "Timed out waiting for primary"
        exit 1
      fi

      mysql -u root -p$MYSQL_ROOT_PASSWORD -e "
        # disable binlog for primary to avoid create user statements being logged
        SET SESSION sql_log_bin=0;
        
        CREATE USER IF NOT EXISTS '$NEXT_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$NEXT_PASSWORD';
        GRANT SELECT, INSERT, UPDATE, DELETE ON starrail.* TO '$NEXT_USER'@'%';
        
        FLUSH PRIVILEGES;

        # re-enable binlog for primary
        SET SESSION sql_log_bin=1;

        CHANGE REPLICATION SOURCE TO
        SOURCE_HOST='mysql-0.mysql.mysql.svc.cluster.local',
        SOURCE_USER='repl',
        SOURCE_PASSWORD='$REPLICA_PASSWORD',
        SOURCE_AUTO_POSITION=1;

        START REPLICA;"
    fi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  serviceName: "mysql"
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        command: ["/bin/bash", "-c"]
        args:
          - |
            ORDINAL=${MYSQL_SERVER_ID##*-}
            exec docker-entrypoint.sh \
              --server-id=$((ORDINAL + 1)) \
              --gtid-mode=ON \
              --enforce-gtid-consistency=ON \
              --log-bin=mysql-bin \
              --binlog-format=ROW \
              --bind-address=0.0.0.0
        ports:
        - containerPort: 3306
          name: mysql
        env:
        - name: MYSQL_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - secretRef:
            name: mysql-secret
        volumeMounts:
        - name: mysql
          mountPath: /var/lib/mysql
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command: ["mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
      volumes:
      - name: init-script
        configMap:
          name: init-script
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: mysql
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
    name: mysql
  clusterIP: None
  selector:
    app: mysql
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mysql-migration
spec:
  template:
    spec:
      volumes:
      - name: shared-sql
        emptyDir: {}

      initContainers:
      - name: starrail-bak
        image: heftychonk/starrail-bak:20241224
        command: ["sh", "-c", "cp /starrail_bak.sql /data/starrail_bak.sql"]
        volumeMounts:
        - name: shared-sql
          mountPath: /data

      containers:
      - name: mysql-client
        image: mysql:8.0
        envFrom:
        - secretRef:
            name: mysql-secret
        command:
          - sh
          - -c
          - |
            until mysqladmin ping -hmysql-0.mysql.mysql.svc.cluster.local -uroot -p$MYSQL_ROOT_PASSWORD --silent; do
              sleep 2
            done
            mysql -hmysql-0.mysql.mysql.svc.cluster.local -uroot -p$MYSQL_ROOT_PASSWORD starrail < /data/starrail_bak.sql || { echo "Restore failed"; exit 1; }
        volumeMounts:
        - name: shared-sql
          mountPath: /data
      restartPolicy: Never
  backoffLimit: 4

---
- name: Set up Talos cluster
  hosts: localhost
  tasks:
    - name: Check if Talos secrets already exist
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/secrets.yaml"
      register: secrets_file
      changed_when: false

    - name: Generate Talos secrets
      ansible.builtin.command:
        chdir: "{{ playbook_dir }}"
        cmd: talosctl gen secrets
      changed_when: true
      when: not secrets_file.stat.exists

    - name: Set up Talos master nodes
      ansible.builtin.include_tasks: "{{ playbook_dir }}/tasks/controlplane.yaml"
      loop: "{{ groups['controlplane'] }}"
      loop_control:
        loop_var: host_name
      vars:
        host_data: "{{ hostvars[host_name] }}"

    - name: Apply Talos configuration to worker nodes
      ansible.builtin.command: |
        talosctl apply-config --insecure --nodes {{ hostvars[item].ip }} \
          --file _out/worker.yaml
      loop: "{{ groups['worker'] }}"
      changed_when: false

    - name: Check if Talos config file already exist
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.talos/config"
      register: talos_config_file
      changed_when: false

    - name: Set up Talos config file
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/_out/talosconfig"
        dest: "{{ ansible_env.HOME }}/.talos/config"
        mode: "0644"
        force: true
      changed_when: false
      when: not talos_config_file.stat.exists

    - name: Merge Talos config file
      ansible.builtin.command:
        cmd: talosctl config merge {{ playbook_dir }}/_out/talosconfig
      changed_when: false
      when: talos_config_file.stat.exists

    - name: Get Talos endpoints
      ansible.builtin.set_fact:
        talos_endpoints: "{{ groups['controlplane'] | map('extract', hostvars, 'ip') | join(' ') }}"

    - name: Configure Talos endpoints
      ansible.builtin.command:
        cmd: |
          talosctl config endpoints {{ talos_endpoints }}
      changed_when: false

    - name: Configure Talos default node
      ansible.builtin.command:
        cmd: |
          talosctl config node {{ hostvars[groups['controlplane'][0]].ip }}
      changed_when: false

    - name: Wait for Talos to be ready
      ansible.builtin.pause:
        minutes: 3
        prompt: "Waiting for Talos to be ready. Press Ctrl+C to abort."
      changed_when: false

    - name: Bootstrap Talos cluster
      ansible.builtin.command:
        cmd: talosctl bootstrap
      changed_when: false

    - name: Retrieve kubeconfig
      ansible.builtin.command:
        cmd: talosctl kubeconfig -f ~/.kube/config
      changed_when: false

    - name: Clean up Talos config files
      ansible.builtin.file:
        path: "{{ playbook_dir }}/patches/vip.yaml"
        state: absent

    - name: Wait for all Talos nodes to join cluster
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: nodes
      until: nodes.resources | length == (groups['controlplane'] | length + groups['worker'] | length)
      retries: 60
      delay: 10

    - name: Wait for all nodes to be Ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: node_status
      until: >
        node_status.resources |
        selectattr('status.conditions', 'defined') |
        map(attribute='status.conditions') |
        flatten |
        selectattr('type', 'equalto', 'Ready') |
        selectattr('status', 'equalto', 'True') |
        list | length == (groups['controlplane'] | length + groups['worker'] | length)
      retries: 60
      delay: 10

    - name: Add Cilium Helm repository
      kubernetes.core.helm_repository:
        name: cilium
        repo_url: https://helm.cilium.io/

    - name: Install Cilium CNI
      kubernetes.core.helm:
        name: cilium
        chart_ref: cilium/cilium
        release_namespace: kube-system
        create_namespace: true
        values:
          ipam:
            mode: kubernetes
          kubeProxyReplacement: true
          operator:
            replicas: 2
          securityContext:
            capabilities:
              ciliumAgent:
                - CHOWN
                - KILL
                - NET_ADMIN
                - NET_RAW
                - IPC_LOCK
                - SYS_ADMIN
                - SYS_RESOURCE
                - DAC_OVERRIDE
                - FOWNER
                - SETGID
                - SETUID
              cleanCiliumState:
                - NET_ADMIN
                - SYS_ADMIN
                - SYS_RESOURCE
          cgroup:
            autoMount:
              enabled: false
            hostRoot: /sys/fs/cgroup
          l2announcements:
            enabled: true
          externalIPs:
            enabled: true
          devices: eth+
          k8sServiceHost: localhost
          k8sServicePort: 7445
          k8sClientRateLimit:
            qps: 25
            burst: 50
          ingressController:
            enabled: true
            default: true
            service:
              type: LoadBalancer

    - name: Install Cilium CNI
      kubernetes.core.helm:
        name: cilium
        chart_ref: cilium/cilium
        release_namespace: kube-system
        create_namespace: true
        values: "{{ base_cilium_values | combine(cilium_ingress_block if enable_cilium_ingress else {}, recursive=True) }}"
      vars:
        base_cilium_values:
          ipam:
            mode: kubernetes
          kubeProxyReplacement: true
          operator:
            replicas: 2
          securityContext:
            capabilities:
              ciliumAgent:
                - CHOWN
                - KILL
                - NET_ADMIN
                - NET_RAW
                - IPC_LOCK
                - SYS_ADMIN
                - SYS_RESOURCE
                - DAC_OVERRIDE
                - FOWNER
                - SETGID
                - SETUID
              cleanCiliumState:
                - NET_ADMIN
                - SYS_ADMIN
                - SYS_RESOURCE
          cgroup:
            autoMount:
              enabled: false
            hostRoot: /sys/fs/cgroup
          l2announcements:
            enabled: true
          externalIPs:
            enabled: true
          devices: "eth+"
          k8sServiceHost: "localhost"
          k8sServicePort: 7445
          k8sClientRateLimit:
            qps: 25
            burst: 50

        cilium_ingress_block:
          ingressController:
            enabled: true
            default: true
            service:
              type: LoadBalancer

    - name: Wait for all Cilium pods to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: kube-system
        label_selectors:
          - "app.kubernetes.io/part-of=cilium"
      register: cilium_pods
      until: >
        cilium_pods.resources | length > 0 and
        cilium_pods.resources |
        selectattr('status.phase', 'equalto', 'Running') |
        list | length == cilium_pods.resources | length
      retries: 30
      delay: 10

    - name: Run Cilium connectivity test
      ansible.builtin.command:
        cmd: cilium connectivity test --namespace-labels pod-security.kubernetes.io/enforce=privileged
      register: connectivity_test
      failed_when: connectivity_test.rc != 0
      changed_when: false

    - name: Delete cilium-test-1 namespace (created by connectivity test)
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: cilium-test-1
        state: absent
        wait: true
        wait_timeout: 300
      register: delete_result
      failed_when: delete_result.rc != 0

    - name: Create default Cilium L2 Announcement Policy
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cilium.io/v2alpha1
          kind: CiliumL2AnnouncementPolicy
          metadata:
            name: default-l2-announcement-policy
            namespace: kube-system
          spec:
            interfaces:
              - ^eth[0-9]+$
            externalIPs: true
            loadBalancerIPs: true

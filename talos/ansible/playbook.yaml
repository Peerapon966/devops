---
- name: Set up Talos cluster
  hosts: localhost
  tasks:
    - name: Check if Talos secrets already exist
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/secrets.yaml"
      register: secrets_file
      changed_when: false

    - name: Generate Talos secrets
      ansible.builtin.command:
        chdir: "{{ playbook_dir }}"
        cmd: talosctl gen secrets
      changed_when: true
      when: not secrets_file.stat.exists

    - name: Set up Talos master nodes
      ansible.builtin.include_tasks: "{{ playbook_dir }}/tasks/controlplane.yaml"
      loop: "{{ groups['controlplane'] }}"
      loop_control:
        loop_var: host_name
      vars:
        host_data: "{{ hostvars[host_name] }}"

    - name: Apply Talos configuration to worker nodes
      ansible.builtin.command: |
        talosctl apply-config --insecure --nodes {{ hostvars[item].ip }} \
          --file _out/worker.yaml
      loop: "{{ groups['worker'] }}"
      changed_when: false

    - name: Check if Talos config file already exist
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.talos/config"
      register: talos_config_file
      changed_when: false

    - name: Set up Talos config file
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/_out/talosconfig"
        dest: "{{ ansible_env.HOME }}/.talos/config"
        mode: "0644"
        force: true
      changed_when: false
      when: not talos_config_file.stat.exists

    - name: Merge Talos config file
      ansible.builtin.command:
        cmd: talosctl config merge {{ playbook_dir }}/_out/talosconfig
      changed_when: false
      when: talos_config_file.stat.exists

    - name: Get Talos endpoints
      ansible.builtin.set_fact:
        talos_endpoints: "{{ groups['controlplane'] | map('extract', hostvars, 'ip') | join(' ') }}"

    - name: Configure Talos endpoints
      ansible.builtin.command:
        cmd: |
          talosctl config endpoints {{ talos_endpoints }}
      changed_when: false

    - name: Configure Talos default node
      ansible.builtin.command:
        cmd: |
          talosctl config node {{ hostvars[groups['controlplane'][0]].ip }}
      changed_when: false

    - name: Wait for Talos to be ready
      ansible.builtin.pause:
        minutes: 3
        prompt: "Waiting for Talos to be ready. Press Ctrl+C to abort."
      changed_when: false

    - name: Bootstrap Talos cluster
      ansible.builtin.command:
        cmd: talosctl bootstrap
      changed_when: false

    - name: Retrieve kubeconfig
      ansible.builtin.command:
        cmd: talosctl kubeconfig -f ~/.kube/config
      changed_when: false

    - name: Clean up Talos config files
      ansible.builtin.file:
        path: "{{ playbook_dir }}/patches/vip.yaml"
        state: absent

    - name: Install Cilium CNI
      ansible.builtin.command:
        cmd:
          helm install \
            cilium \
            cilium/cilium \
            --namespace kube-system \
            --set=ipam.mode=kubernetes \
            --set=kubeProxyReplacement=true \
            --set=operator.replicas=1 \
            --set=securityContext.capabilities.ciliumAgent="{CHOWN,KILL,NET_ADMIN,NET_RAW,IPC_LOCK,SYS_ADMIN,SYS_RESOURCE,DAC_OVERRIDE,FOWNER,SETGID,SETUID}" \
            --set=securityContext.capabilities.cleanCiliumState="{NET_ADMIN,SYS_ADMIN,SYS_RESOURCE}" \
            --set=cgroup.autoMount.enabled=false \
            --set=cgroup.hostRoot=/sys/fs/cgroup \
            --set=l2announcements.enabled=true \
            --set=externalIPs.enabled=true \
            --set=devices=eth+ \
            --set=k8sServiceHost=localhost \
            --set=k8sServicePort=7445 \
            --set=k8sClientRateLimit.qps=25 \
            --set=k8sClientRateLimit.burst=50
      changed_when: true
